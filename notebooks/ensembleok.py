# -*- coding: utf-8 -*-
"""ensembleOK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/128O0iL1CLEnkdHUjCqgob9rbfvMmeDik
"""

from numpy.random import seed
import random

seed(485)
random.seed(485)

import pandas as pd
import numpy as np
import tensorflow

df = pd.read_csv('/content/ncaaAll_binary.csv')

from sklearn.model_selection import train_test_split
X = df.iloc[:,1:9]
y = df.iloc[:,9]
X = X.replace({True:1, False:0})

from keras.utils import to_categorical
y = y.replace({'Rush':0, 'Pass':1, 'FG':2, 'Punt':3})
y = to_categorical(y)

from sklearn.preprocessing import StandardScaler

ss = StandardScaler()
numeric = ['score_differential', 'period', 'seconds_remaining', 'secondsInHalf', 'yardsToGoal', 'down', 'distance']
scaled_features = X.copy()
features = scaled_features[numeric]
scaler = ss.fit(features.values)
features = ss.transform(features.values)

scaled_features[numeric] = features

X = scaled_features
X

"""# Building the Ensemble"""

from tensorflow.keras import models

coaching = models.load_model('coachingModel.h5')
conference = models.load_model('conferenceModel.h5')
league = models.load_model('leagueModel.h5')

def makePrediction(dataPoint):
  coach_prediction = coaching.predict(dataPoint)
  conference_prediction = conference.predict(dataPoint)
  league_prediction = league.predict(dataPoint)

  final_prediction = (0.5*coach_prediction + 0.3*conference_prediction + 0.2*league_prediction)
  return final_prediction

"""# Ensemble Performance on Test Case"""

testDF = pd.read_csv('/content/testBinary2.csv')
XGame = testDF.iloc[:,1:9]
yGame= testDF.iloc[:,10]

XGame = XGame.replace({True:1, False:0})
yGame = yGame.replace({'Rush':0, 'Pass':1, 'FG':2, 'Punt':3})
yGame = to_categorical(yGame)

scaled_features = XGame.copy()
features = scaled_features[numeric]
features = ss.transform(features.values)

scaled_features[numeric] = features

XGame = scaled_features

# Create an empty list 
row_list =[] 
  
# Iterate over each row 
for index, rows in XGame.iterrows(): 
    # Create list for the current row 
    my_list =[rows.score_differential, 
              rows.oneScoreGame,
              rows.period,
              rows.seconds_remaining,
              rows.secondsInHalf,
              rows.yardsToGoal,
              rows.down,
              rows.distance ] 
      
    # append the list to the final list 
    row_list.append(my_list)

correct = 0
for i in range(0, len(row_list)):
  play = np.array(row_list[i]).reshape(1,-1)
  prediction = makePrediction(play)
  if np.argmax(yGame[i], axis=0) == np.argmax(prediction[0], axis=0):
    correct += 1

print("Total plays analyzed: " + str(len(XGame)))
print("Plays guessed correctly: " + str(correct))
print("Percentage correct: " + str(correct/len(XGame)*100) + "%")

"""Okay, this is pretty good.

# Input Live Data

Set prediction parameters here.
"""

OFFENSE_SCORE = 7
DEFENSE_SCORE = 0
PERIOD = 1
MINUTES = 5
SECONDS = 46
YARDS_TO_GOAL = 19
DOWN = 2
DISTANCE = 10

"""We'll write a function here to clean the input parameters into the features that the models take as input. We'll return the data as a numpy array so we can put it in the model."""

import numpy as np

def clean_data():
  score_difference = OFFENSE_SCORE - DEFENSE_SCORE
  oneScoreGame = 1 if score_difference > -8 and score_difference < 8 else 0
  period = PERIOD
  seconds_remaining = ((4-PERIOD) * 15 * 60) + (MINUTES * 60) + SECONDS
  secondsInHalf = (seconds_remaining - 1800) if period < 2 else seconds_remaining
  yardsToGoal = YARDS_TO_GOAL
  down = DOWN
  distance = DISTANCE
  arrayed_data = np.array([score_difference, oneScoreGame, period, seconds_remaining, secondsInHalf, yardsToGoal, down, distance]).reshape(1,-1)
  return arrayed_data

"""Okay, now we have to regularize the data on the scale of all of the test data."""

predict_data = clean_data()
play_df = pd.DataFrame(data=predict_data, columns=['score_differential', 'oneScoreGame', 'period', 'seconds_remaining', 'secondsInHalf', 'yardsToGoal', 'down', 'distance'])

scaled_features = play_df.copy()
features = scaled_features[numeric]
features = ss.transform(features.values)

scaled_features[numeric] = features

play = np.array(scaled_features)

pred = makePrediction(play)

print(pred)